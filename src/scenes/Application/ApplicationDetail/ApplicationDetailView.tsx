import React from 'react'
import { connect } from 'react-redux';
import { Application } from '../../../models/Application.class'
import { Scholarship, ScholarshipQuestion } from '../../../models/Scholarship.class'
import { UserProfile } from '../../../models/UserProfile.class';
import { prettifyKeys } from '../../../services/utils';

export interface ApplicationDetailViewProps {
    scholarship: Scholarship,
    application: Application,
    userProfileLoggedIn: UserProfile,
    questions: ScholarshipQuestion[],
    responses: any,
}

/**
 * questions is a list in one of two formats:
    * [{key: "", question: ""}]
    * [{key: ""}]
    *
    * scholarship_responses:
    * { "favourite-sport": "<p>volleyball</p>",
    * "why-do-you-deserve-this-scholarship": "<p>I like food</p>",
    * "example-file": "https://example.com/example.pdf"}
    * user_profile_responses:
    * email: "test_user@atila.ca"
    * first_name: "FirstName"
    * last_name: "LastName"
*/

function ApplicationDetailView(props: ApplicationDetailViewProps) {

  const { scholarship, application, userProfileLoggedIn, questions, responses } = props;
  let isOwnerOfApplication = userProfileLoggedIn && application.user && ((application.user as UserProfile).user === userProfileLoggedIn.user);

  let displayRealName = isOwnerOfApplication || scholarship.is_winner_selected || !scholarship.is_blind_applications;

  return( <>
    {
        questions.map((question) => {
            if (question.key === "first_name" || question.key === "last_name") {
                // All applications are autogenerated with a first_name_code and last_name_code
                // that can be used for blind applications.
                const key_code = `${question.key}_code`;
      
                return (<div key={question.key}>
                    <div className="white-space-pre-wrap">
                        <b>{prettifyKeys(question.key)}:</b><br/>
                        {displayRealName? responses[question.key] : (application as any)[key_code]}
                    </div>
                </div>);
            }
            if (question.key === "email" && !isOwnerOfApplication) {
                return <></>;
            }
            return (<div key={question.key}>
                <div className="white-space-pre-wrap">
                    <b>{question.question || prettifyKeys(question.key)}:</b><br/>
      
                    {question.type === "long_answer" ?
                        <div className="my-1" dangerouslySetInnerHTML={{__html: responses[question.key]}}/>
                        : question.type === "checkbox" ?
                            responses[question.key] ? "Yes" : "No"
                            : responses[question.key]}
                </div>
            </div>)})
    }
  </>);
}
const mapStateToProps = (state: any) => {
    return { userProfileLoggedIn: state.data.user.loggedInUserProfile };
};

export default connect(mapStateToProps)(ApplicationDetailView);